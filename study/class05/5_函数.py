#定义一个函数
# 你可以定义一个由自己想要功能的函数，以下是简单的规则：
# 函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()。
# 任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。
# 函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。
# 函数内容以冒号 : 起始，并且缩进。
# return [表达式] 结束函数，选择性地返回一个值给调用方，不带表达式的 return 相当于返回 None。
def __比大小__(a,b):
    if a>b:
        print('a大')
        return a
    elif a<b:
        print('b大')
        return b
    else:
        print('一样大')
        return a,b
print(__比大小__(6,8))

#函数调用
# 定义一个函数：给了函数一个名称，指定了函数里包含的参数，和代码块结构。
# 这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从 Python 命令提示符执行。
def __算面积__(长,宽):
    print('这是一个计算面积的函数')
    print(长*宽)
    return 长*宽;
a=10;b=3
__算面积__(a,b)
print('长=%d,宽=%d,面积=%d'%(a,b,__算面积__(a,b)))

#参数传递
#在 python 中，类型属于对象，变量是没有类型的：
# a=[1,2,3]
# a="Runoob"
# 以上代码中，[1,2,3] 是 List 类型，"Runoob" 是 String 类型，而变量 a 是没有类型，
# 她仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。

#可更改(mutable)与不可更改(immutable)对象
# 在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。
# 不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a。
# 可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。
# python 函数的参数传递：
# 不可变类型：类似 C++ 的值传递，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。
# 可变类型：类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响
# python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。

#python 传不可变对象实例
def test(a,b):
    print('原始对象地址',id(a))
    print('原始对象地址',id(b))
    print(a,b)
    a=10
    b=5
    print('新对象地址',id(a))
    print('新对象地址',id(b))
    print(a,b)

a=3
b=4
test(a,b)
print(a,b)

#传可变对象实例
# 可变对象在函数里修改了参数，那么在调用这个函数的函数里，原始的参数也被改变了
def test2(list):
    print('原始对象地址',id(list))
    list[2]='s'
    print('新对象地址',id(list))

list1=[1,3,5,'8k8k','45456']
print(id(list1))
test2(list1)
print(list1)

#参数
# 以下是调用函数时可使用的正式参数类型：
# 必需参数\关键字参数\ 默认参数\不定长参数

# 必需参数
# 必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。
# 调用 printme() 函数，你必须传入一个参数，不然会出现语法错误：
def printme(str):
    print(str)
# printme()
printme('ssss')

#关键字参数
# 关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。
# 使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。
test(b=3,a=6)

#默认参数
#调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值：
# def __还是算面积__(a=3, b):这里注意给默认值时，如果前一个参数有默认值，那后面的参数 都要有默认值
def __还是算面积__(a, b=5):
    print(a*b)
    return a*b

print(__还是算面积__(a=3, b=4))
print(__还是算面积__(5))

#不定长参数
#你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下
#加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。
def test3(a,*b):
    print(a,b)
    for x in b:
        print(x,end='-')
test3(3,5,6,8,8,8,8,8,8)

#加了两个星号 ** 的参数会以字典的形式导入。
def test4(a1,**b):
    print(a1,b)
test4(3,a=5,c=6)

#声明函数时，参数中星号 * 可以单独出现
#如果单独出现星号 * 后的参数必须用关键字传入
def test5(a,b,*,c):
    return a+b+c
print(test5(3,4,c=3))

#匿名函数
#python 使用 lambda 来创建匿名函数。
# 所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。
# lambda 只是一个表达式，函数体比 def 简单很多。
# lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。
# lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。
# 虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。
sum=lambda a,b:a+b
print(sum(1,6))

#return语句
#return [表达式] 语句用于退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。之前的例子都没有示范如何返回数值，以下实例演示了 return 语句的用法：
# 可写函数说明
def sum(arg1, arg2):
    # 返回2个参数的和."
    total = arg1 + arg2
    print("函数内 : ", total)
    return total


# 调用sum函数
total = sum(10, 20)
print("函数外 : ", total)

#强制位置参数
# Python3.8 新增了一个函数形参语法 / 用来指明函数形参必须使用指定位置参数，不能使用关键字参数的形式。
# 在以下的例子中，形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参:
def f(a, b, /, c, d, *, e, f):
    print(a, b, c, d, e, f)
f(10, 20, 30, d=40, e=50, f=60)

# f(10, b=20, c=30, d=40, e=50, f=60)   # b 不能使用关键字参数的形式
#f(10, 20, 30, 40, 50, f=60)           # e 必须使用关键字参数的形式


